
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.Random;
import javax.swing.*;

@SuppressWarnings("deprecation")
class SenderPane extends javax.swing.JFrame {

    public static File file;
    private static ServerSocket sender = null;
    private static Socket receiver = null;
    private static PrintStream output = null;
    private static OutputStream os = null;
    private static DataInputStream is = null;
    private static DatagramSocket senderDatagramSocket = null;
    private static String TARGET_IP = "";
    public final int SIZE = 65000;

    /**
     * Creates new form SenderPane
     */
    public SenderPane() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnOpenFile = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnSendTCP = new javax.swing.JButton();
        btnSendRBUDP = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfFilePath = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnOpenFile.setText("Open File to Send");
        btnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFileActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblTitle.setText("Sender");

        btnSendTCP.setText("Send via TCP");
        btnSendTCP.setEnabled(false);
        btnSendTCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendTCPActionPerformed(evt);
            }
        });

        btnSendRBUDP.setText("Send via RBUDP");
        btnSendRBUDP.setEnabled(false);
        btnSendRBUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendRBUDPActionPerformed(evt);
            }
        });

        jLabel2.setText("File:");

        tfFilePath.setEditable(false);

        taLog.setEditable(false);
        taLog.setColumns(20);
        taLog.setRows(5);
        jScrollPane1.setViewportView(taLog);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOpenFile)
                        .addGap(115, 115, 115))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnSendRBUDP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSendTCP)))
                        .addGap(55, 55, 55))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(lblTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnOpenFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSendRBUDP)
                    .addComponent(btnSendTCP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void btnSendTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendTCPActionPerformed
        if (receiver == null) {
            JOptionPane.showMessageDialog(rootPane, "You can't send a message to fresh air!\nPlease make sure a receiver is connected.");
        } else {
            try {
                os = receiver.getOutputStream();
                output = new PrintStream(os);
                FileInputStream fis = new FileInputStream(file);
                BufferedInputStream bis = new BufferedInputStream(fis);

                byte[] contents;
                long fileLength = file.length();
                long current = 0;

                output.println("tcp");
                output.println(fileLength);
                output.println(file.getName());
                taLog.append("Sending " + file.getName() + " via TCP\n");

                while (current != fileLength) {
                    int size = SIZE;

                    if (fileLength - current >= size) {
                        current += size;
                    } else {
                        size = (int) (fileLength - current);
                        current = fileLength;
                    }

                    contents = new byte[size];
                    bis.read(contents, 0, size);
                    os.write(contents);
                }

                bis.close();
                fis.close();
                os.flush();
            } catch (IOException e) {
                System.out.println(e);
            }

            btnSendRBUDP.setEnabled(false);
            btnSendTCP.setEnabled(false);
            tfFilePath.setText("");
            file = null;
        }
    }//GEN-LAST:event_btnSendTCPActionPerformed

    private void btnSendRBUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendRBUDPActionPerformed
        if (receiver == null) {
            JOptionPane.showMessageDialog(rootPane, "You can't send a message to fresh air!\nPlease make sure a receiver is connected.");
        } else {
            taLog.append("Sending " + file.getName() + " via RBUDP\n");

            try {
                os = receiver.getOutputStream();
                output = new PrintStream(os);
                is = new DataInputStream(receiver.getInputStream());
                FileInputStream fis = new FileInputStream(file);
                BufferedInputStream bis = new BufferedInputStream(fis);

                LinkedList<DatagramPacket> packets = new LinkedList<>();
                LinkedList<byte[]> ids = new LinkedList<>();

                //Read File Contents into contents array 
                byte[] contents;
                long fileLength = file.length();
                long current = 0;
                boolean complete = false;

                output.println("rbudp");
                output.println(fileLength);
                output.println(file.getName());

                while (current != fileLength) {
                    int size = SIZE;
                    byte[] seqNum = randomSeqNum(ids, 50);
                    ids.add(seqNum);

                    if (fileLength - current >= size) {
                        current += size;
                    } else {
                        size = (int) (fileLength - current);
                        current = fileLength;
                    }

                    contents = new byte[size];
                    bis.read(contents, 0, size);

                    byte[] udpContents = new byte[contents.length + 50];
                    System.arraycopy(contents, 0, udpContents, 0, contents.length);
                    System.arraycopy(ids.get(ids.size() - 1), 0, udpContents, contents.length, 50);

                    InetAddress address = InetAddress.getByName(TARGET_IP);
                    DatagramPacket sendPacket = new DatagramPacket(udpContents, udpContents.length,
                            address, 8000);
                    packets.add(sendPacket);
                }


                /* Sending packets */
                int batchNum = 0;
                int packetCount = packets.size();
                while (!complete) {
                    // Create batch
                    int batchSize = 4;
                    if (packetCount < 4) {
                        batchSize = packetCount;
                    }
                    
                    LinkedList<DatagramPacket> batch = new LinkedList<>();
                    LinkedList<String> batchIds = new LinkedList<>();
                    
                    for (int i = 0; i < batchSize; i++) {
                        batch.add(packets.get(i + (4 * batchNum)));
                        byte[] temp = new byte[50];
                        String tempId;
                        temp = ids.get(i + (4 * batchNum));
                        tempId = new String(temp);
                        batchIds.add(new String(tempId));
                    }
                    
                    packetCount -= batchSize;
                    
                    // Send batch until completed
                    while (true) {
                        // send packets
                        for (DatagramPacket p : batch) {
                            byte[] data = p.getData();
                            String id = new String(Arrays.copyOfRange(data, data.length - 50, data.length));
                            if (batchIds.contains(id)) {
                                senderDatagramSocket.send(p);
                            }
                        }

                        // Send batch ids
                        output.println(batchIds.size());
                        
                        for (String b : batchIds) {
                            output.println(b.getBytes().length);
                            os.write(b.getBytes());
                        }

                        // receive ACK
                        String ack;
                        if ((ack = is.readLine()).equals("done")) {
                            break;
                        } else {
                            batchSize = Integer.parseInt(ack);
                            batchIds = new LinkedList<>();
                            for (int i = 0; i < batchSize; i++) {
                                byte[] id = new byte[Integer.parseInt(is.readLine())];
                                is.readFully(id);
                                batchIds.add(new String(id));
                            }
                        }
                        output.println("eob");
                    }
                    
                    // End file
                    if (packetCount == 0) {
                        complete = true;
                        output.println("eof");
                    } else {
                        // End batch
                        output.println("eob");
                        batchNum++;
                    }
                }

                output.flush();
                bis.close();
                fis.close();
                os.flush();
            } catch (IOException e) {
                System.out.println(e);
            }

            btnSendRBUDP.setEnabled(false);
            btnSendTCP.setEnabled(false);
            tfFilePath.setText("");
            file = null;
        }
    }//GEN-LAST:event_btnSendRBUDPActionPerformed

    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFileActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(SenderPane.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            taLog.append("Opening " + file.getName() + "\n");
            tfFilePath.setText(file.getPath());
            btnSendTCP.setEnabled(true);
            btnSendRBUDP.setEnabled(true);
        } else {
            taLog.append("Open command cancelled by user.\n");
        }
    }//GEN-LAST:event_btnOpenFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SenderPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SenderPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SenderPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SenderPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        while (TARGET_IP.equals("")) {
            TARGET_IP = JOptionPane.showInputDialog(null, "Please enter the Receiver's IP:");

            if (TARGET_IP == null) {
                System.exit(0);
            }
        }

        new SenderPane().setVisible(true);
        
        //Initialize Sockets
        sender = new ServerSocket(8000);
        senderDatagramSocket = new DatagramSocket();
        receiver = sender.accept();
    }

    private byte[] randomSeqNum(LinkedList<byte[]> ids, int length) {
        boolean unique = false;
        byte[] id = new byte[length];

        while (!unique) {
            new Random().nextBytes(id);

            if (!ids.contains(id)) {
                unique = true;
            }
        }
        return id;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenFile;
    private javax.swing.JButton btnSendRBUDP;
    private javax.swing.JButton btnSendTCP;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextArea taLog;
    private javax.swing.JTextField tfFilePath;
    // End of variables declaration//GEN-END:variables
}
