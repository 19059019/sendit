
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

@SuppressWarnings("deprecation")
class ReceiverPane extends javax.swing.JFrame implements Runnable {

    public static FileOutputStream fos = null;
    public static DataOutputStream dos = null;
    public static File file = null;
    public static OutputStream os = null;
    public static Socket receiver = null;
    public static int counter = 0;
    public static Boolean status = true;
    public static DataInputStream dis = null;
    public static PrintStream sender = null;
    public static Boolean done = true;
    public static String FILE_PATH = "";
    public static int prog = 0;
    public static DatagramSocket receiverDatagramSocket = null;
    public final int SIZE = 65000;

    /**
     * Creates new form ReceiverPane
     */
    public ReceiverPane() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pbProgress = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblTitle.setText("Receiver");

        jLabel1.setText("Progress:");

        taLog.setEditable(false);
        taLog.setColumns(20);
        taLog.setLineWrap(true);
        taLog.setRows(5);
        taLog.setFocusable(false);
        jScrollPane1.setViewportView(taLog);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(lblTitle))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 50, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ReceiverPaneInit() {
        initComponents();
        setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceiverPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceiverPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceiverPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceiverPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        String host = "";

        while (host.equals("")) {
            host = JOptionPane.showInputDialog(null, "Please enter the Sender's IP:");

            if (host == null) {
                System.exit(0);
            }
        }

        try {
            //Initialize socket
            receiver = new Socket(host, 8000);
            receiverDatagramSocket = new DatagramSocket(8000);
            receiverDatagramSocket.setSoTimeout(20);

            final JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.setAcceptAllFileFilterUsed(false);
            int returnVal = fc.showOpenDialog(null);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                FILE_PATH = fc.getSelectedFile().getAbsolutePath();
            } else {
                System.exit(0);
            }

            // Thread to listen for TCP and RBUDP file requests
            new Thread(new ReceiverPane()).start();

            dis = new DataInputStream(receiver.getInputStream());

            while (status) {
            }

            receiver.close();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(null, "Unknown host. Come back when"
                    + " you're sure of where you're going!");

            System.exit(0);
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JProgressBar pbProgress;
    private javax.swing.JTextArea taLog;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        ReceiverPaneInit();

        String method;

        done = false;

        try {
            while (!done) {
                if (dis.available() != 0) {
                    method = dis.readLine();
                    if (method.equals("rbudp")) {
                        rbudpListener();
                    } else if (method.equals("tcp")) {
                        tcpAcceptor();
                    } else {
                        continue;
                    }

                    counter++;
                    taLog.append("Done receiving!\n");
                    pbProgress.setValue(0);
                }
            }

            dis.close();
            sender.close();
        } catch (UnknownHostException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        }

        done = true;
    }

    @SuppressWarnings("unchecked")
    private void rbudpListener() {
        try {
            StringBuilder sb = new StringBuilder();
            FileWriter fw = new FileWriter("rbudp_random.csv", true);
            long starttime = System.currentTimeMillis();
            int filesize = Integer.parseInt(dis.readLine());
            int fs = filesize;
            String filename = dis.readLine();
            boolean complete = false;
            int packetsSentCount = 0;
            int packetLossCount = 0;

            byte[] expectedId = new byte[50];
            LinkedList<String> lostIds = new LinkedList<>(); 
            LinkedList<byte[]> receivedPackets = new LinkedList<>();

            LinkedList<String> received = new LinkedList<>();

            pbProgress.setMaximum(filesize);
            prog = 0;
            taLog.append("Receiving " + filename + " via RBUDP\n");

            //No of bytes read in one read() call
            byte[] data = new byte[SIZE + 50];

            //Initialize the FileOutputStream to the output file's full path.
            
            file = new File(FILE_PATH + "/" + filename);
            fos = new FileOutputStream(file);
            dos = new DataOutputStream(fos);
            os = receiver.getOutputStream();
            sender = new PrintStream(os);
            int bytesRead = 0;


            /* Receive Packets */
            while (!complete) {
                LinkedList<String> orderedIds = new LinkedList<>();
                LinkedList<String> batchIds = new LinkedList<>();

                // receive in batches
                receivedPackets = new LinkedList<>();
                received = new LinkedList<>();

                while (true) {
                    
                    // Get initial batch expectation
                    int batchSize = Integer.parseInt(dis.readLine());
                    for (int i = 0; i < batchSize; i++) {
                        expectedId = new byte[Integer.parseInt(dis.readLine())];
                        dis.readFully(expectedId);
                        orderedIds.add(new String(expectedId));
                        batchIds.add(new String(expectedId));
                    }

                    packetsSentCount += batchSize;

                    while (true) {
                        
                        data = new byte[SIZE + 50];

                        if (filesize < SIZE) {
                            bytesRead = filesize;
                        } else {
                            bytesRead = SIZE;
                        }

                        DatagramPacket receivePacket = new DatagramPacket(data, data.length);

                        try {
                            receiverDatagramSocket.receive(receivePacket);
                        } catch (IOException e) {
                            LinkedList<String> temp = (LinkedList) batchIds.clone();
                            lostIds = new LinkedList<>();
                            
                            for (String s : temp) {
                                if (!received.contains(s)) {
                                    lostIds.add(s);
                                } else {
                                    batchIds.remove(s);
                                }
                            }

                            received = new LinkedList<>();
                            batchIds = new LinkedList<>();
                            batchIds = (LinkedList) lostIds.clone();

                            // Send size of lost packets
                            sender.println(lostIds.size());
                            packetLossCount += lostIds.size();

                            // Send lost packets as ack
                            for (String s : lostIds) {
                                sender.println(s.getBytes().length);
                                os.write(s.getBytes());
                            }

                            break;
                        }
                        received.add(new String(Arrays.copyOfRange(data, bytesRead, bytesRead + 50)));
                        receivedPackets.add(Arrays.copyOfRange(data, 0, bytesRead));
                        filesize -= bytesRead;
                        prog += bytesRead;
                        pbProgress.setValue(prog);

                        if (received.size() == batchSize) {
                            sender.println("done");
                            break;
                        }
                    }
                    if (filesize == 0) {
                        complete = true;
                        break;
                    }
                    String fileStatus = dis.readLine();
                    if (fileStatus.equals("eof")) {
                        complete = true;
                        break;
                    } else if (fileStatus.equals("eob")) {
                        break;
                    }
                }

                for (byte[] b : receivedPackets) {
                    dos.write(b, 0, b.length);
                }

                if (filesize == 0) {
                    complete = true;
                }

            }
            System.out.println("Packets Sent : " +packetsSentCount);
            System.out.println("Packets Lost : " + packetLossCount);

            dos.flush();
            fos.close();
            
            long endtime = System.currentTimeMillis();
            long elapsed = endtime - starttime;

            sb.append(elapsed + ",");
            sb.append(fs + ",");
            sb.append(packetsSentCount + ",");
            sb.append(packetLossCount + ",");
            sb.append('\n');

            fw.append(sb.toString());
            fw.flush();
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    private void tcpAcceptor() {
        try {
            StringBuilder sb = new StringBuilder();
            FileWriter fw = new FileWriter("tcp_random.csv", true);
            long starttime = System.currentTimeMillis();
            int filesize = Integer.parseInt(dis.readLine());
            int fs = filesize;
            String filename = dis.readLine();
            pbProgress.setMaximum(filesize);
            pbProgress.setValue(0);
            prog = 0;
            taLog.append("Receiving " + filename + " via TCP\n");
            
            //No of bytes read in one read() call
            byte[] data = new byte[SIZE];

            //Initialize the FileOutputStream to the output file's full path.
            file = new File(FILE_PATH + "/" + filename);
            fos = new FileOutputStream(file);
            dos = new DataOutputStream(fos);
            int bytesRead = 0;

            while (filesize != 0 && (bytesRead = dis.read(data)) != -1) {
                dos.write(data, 0, bytesRead);
                filesize -= bytesRead;
                prog += bytesRead;
                pbProgress.setValue(prog);
            }

            dos.flush();
            fos.close();

            long endtime = System.currentTimeMillis();
            long elapsed = endtime - starttime;

            sb.append(elapsed + ",");
            sb.append(fs + ",");
            sb.append('\n');

            fw.append(sb.toString());
            fw.flush();
        } catch (IOException e) {
            System.out.println(e);
        }
    }
}
